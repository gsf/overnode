#!/usr/bin/env node
// Overnode executable, for spawning and watching over processes
// 
// See etc/overnode for example config file

var fs = require('fs');
var spawn = require('child_process').spawn;
var util = require('util');

var configFile = process.argv[2] || 'etc/overnode';

var children;
try {
  children = JSON.parse(fs.readFileSync(configFile));
} catch (e) {
  if (e.type == 'unexpected_token') {
    children = {};
    children[configFile] = {
      command: 'node ./' + configFile,
      watch: './'
    }
    if (process.argv.length > 3)
      children[configFile].args = process.argv.slice(2, process.argv.length)
  }
}
//console.log(children);

var names = Object.keys(children);
names.forEach(function(name) {
  var child = children[name];
  child.name = name;
  if (child.stdout) 
    child.stdoutStream = fs.createWriteStream(child.stdout, {flags: 'a'});
  if (child.stderr) 
    child.stderrStream = fs.createWriteStream(child.stderr, {flags: 'a'});
  spawnInstance(child);
});

util.log('Overnode spawned '+names.length+' processes');

// Kill children on stop
process.on('SIGTERM', function() {
  names.forEach(function(name) {
    var child = children[name];
    killInstance(child);
    if (child.stdoutStream) child.stdoutStream.end();
    if (child.stderrStream) child.stderrStream.end();
  });
  // XXX will this help with hanging process?
  process.exit();
});

function spawnInstance(child) {
  util.log('Spawning child: '+child.name);
  var args = child.args || [];
  var command = child.command;
  var splitCommand = child.command.split(' ');
  if (splitCommand.length > 1) {
    command = splitCommand.shift();
    args = splitCommand.concat(args);
  }
  //util.log('Spawning "'+command+' '+args.join(' ')+'"');
  child.instance = spawn(command, args);
  child.instance.ctime = Date.now();
  if (child.watch) {
    fs.watch(child.watch, function(event) {
      util.log('File changed: '+child.watch);
      reSpawnInstance(child);
    });
  }
  child.instance.stdout.on('data', function(data) {
    if (child.stdoutStream) child.stdoutStream.write(data);
    else process.stdout.write(data);
  });
  child.instance.stderr.on('data', function(data) {
    if (child.stderrStream) child.stderrStream.write(data);
    else process.stderr.write(data);
  });
}

function killInstance(child) {
  util.log('Killing child: '+child.name);
  child.instance.kill();
}

function reSpawnInstance(child) {
  // don't act if the child has lived for less than a second
  if (Date.now() - child.instance.ctime > 1000) {
    killInstance(child);
    spawnInstance(child);
  }
}
