#!/usr/bin/env node
// Overnode executable, for starting and watching over processes
// 
// Optional config file should look something like this:
//
// {
//   "scripts": [
//     {
//       "script": "/path/to/script.js",
//       "args": [
//         "args",
//         "for",
//         "script"
//       ],
//       "watch": true
//     }
//   ]
// }
//

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var util = require('util');

var root = '/var/node/';
var logRoot = '/var/log/node/';

var dirs = fs.readdirSync(root);
var children = {};
dirs.forEach(function(dir) {
  var scriptPath = root+dir+'/server.js';
  fs.watch(scriptPath, function(event) {
    util.log('Killing '+dir+' due to '+event+'...');
    children[dir].kill();
  });
  spawnChild(dir);
});

util.log('Overnode started '+Object.keys(children).length+' processes');
//util.log(util.inspect(children));

// Kill children on stop
process.on('SIGTERM', function() {
  var child;
  for (var key in children) {
    child = children[key];
    child.forceStop = true;
    child.kill();
    //util.log(util.inspect(child));
  }
  // XXX will this help with hanging process?
  process.exit();
});

function spawnChild(dir) {
  var scriptPath = root+dir+'/server.js';
  var child = spawn('node', [scriptPath]);
  util.log('Started script at '+scriptPath);
  children[dir] = child;
  child.ctime = Date.now();
  child.stdout.on('data', function(data) {
    fs.writeFile(logRoot+dir+'.access.log', data, function(err) {
      if (err) throw err;
    });
  });
  child.stderr.on('data', function(data) {
    fs.writeFile(logRoot+'error.log', data, function(err) {
      if (err) throw err;
    });
  });
  // Restart on exit if not forceStop
  child.on('exit', function() {
    if (!child.forceStop) {
      children[dir] = null;
      //setTimeout(spawnChild(dir), 5000);
      spawnChild(dir);
    }
  });
}
